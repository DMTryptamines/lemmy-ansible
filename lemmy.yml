
---
- hosts: all

  # Install python if required
  # https://www.josharcher.uk/code/ansible-python-connection-failure-ubuntu-server-1604/
  gather_facts: False
  pre_tasks:
    - name: check lemmy_base_dir
      fail:
        msg: "`lemmy_base_dir` is unset. if you are upgrading from an older version, add `lemmy_base_dir=/lemmy` to your inventory file."
      when: lemmy_base_dir is not defined

    - name: install python for Ansible
      # python2-minimal instead of python-minimal for ubuntu 20.04 and up
      raw: test -e /usr/bin/python || (apt -y update && apt install -y python3-minimal python3-setuptools)
      args:
        executable: /bin/bash
      register: output
      changed_when: output.stdout != ''

    - setup: # gather facts

  tasks:
  - name: install dependencies
    apt:
      update_cache: yes
      pkg:
#        - 'nginx'
        - 'docker-compose'
        - 'docker.io'
#        - 'certbot'
#        - 'python3-certbot-nginx'

#  - name: request initial lemmy letsencrypt certificate
#    command: certbot certonly --nginx --agree-tos --cert-name '{{ domain }}' -d '{{ domain }}' -m '{{ letsencrypt_contact_email }}'
#    args:
#      creates: '/etc/letsencrypt/live/{{domain}}/privkey.pem'
#
#  - name: request 2nd lemmy front initial letsencrypt certificate
#    command: certbot certonly --nginx --agree-tos --cert-name '{{ domain2 }}' -d '{{ domain2 }}' -m '{{ letsencrypt_contact_email }}'
#    args:
#      creates: '/etc/letsencrypt/live/{{domain2}}/privkey.pem'
#
#  - name: request jaeger initial letsencrypt certificate
#    command: certbot certonly --nginx --agree-tos --cert-name '{{ domain3 }}' -d '{{ domain3 }}' -m '{{ letsencrypt_contact_email }}'
#    args:
#      creates: '/etc/letsencrypt/live/{{domain3}}/privkey.pem'

#  - name: reload nginx with new config
#    shell: systemctl stop nginx

  - name: create lemmy folder
    file:
      path: '{{item.path}}'
      owner: '{{item.owner}}'
      state: directory
    with_items:
      - path: '{{lemmy_base_dir}}/{{domain}}/'
        owner: 'root'
      - path: '{{lemmy_base_dir}}/{{domain}}/alertmanager/'
        owner: 'root'
      - path: '{{lemmy_base_dir}}/{{domain}}/caddy/'
        owner: 'root'
      - path: '{{lemmy_base_dir}}/{{domain}}/grafana/'
        owner: 'root'
      - path: '{{lemmy_base_dir}}/{{domain}}/grafana/provisioning/'
        owner: 'root'
      - path: '{{lemmy_base_dir}}/{{domain}}/grafana/provisioning/dashboards/'
        owner: 'root'
      - path: '{{lemmy_base_dir}}/{{domain}}/grafana/provisioning/datasources/'
        owner: 'root'
      - path: '{{lemmy_base_dir}}/{{domain}}/helpers/'
        owner: 'root'
      - path: '{{lemmy_base_dir}}/{{domain}}/helpers/aws/'
        owner: 'root'
      - path: '{{lemmy_base_dir}}/{{domain}}/prometheus/'
        owner: 'root'
      - path: '{{lemmy_base_dir}}/{{domain}}/screens/'
        owner: 'root'
      - path: '{{lemmy_base_dir}}/{{domain}}/volumes/'
        owner: 'root'
      - path: '{{lemmy_base_dir}}/{{domain}}/volumes/pictrs/'
        owner: '991'

  - block:
    - set_fact:
        lemmy_port: "{{ 32767 |random(start=1024) }}"
        lemmy_ui_port: "{{ 32767 |random(start=1024) }}"
        lemmy_uit_port: "{{ 32767 |random(start=1024) }}"
        pictrs_port: "{{ 32767 |random(start=1024) }}"

    - name: add template files
      template:
        src: '{{item.src}}'
        dest: '{{item.dest}}'
        mode: '{{item.mode}}'
      with_items:
        - src: 'templates/docker-compose.yml'
          dest: '{{lemmy_base_dir}}/{{domain}}/docker-compose.yml'
          mode: '0644'
#        - src: 'templates/nginx.conf'
#          dest: '/etc/nginx/sites-available/{{domain}}.conf'
#          mode: '0644'
#        - src: 'templates/nginx2.conf'
#          dest: '/etc/nginx/sites-available/{{domain2}}.conf'
#          mode: '0644'
#        - src: 'templates/nginx3.conf'
#          dest: '/etc/nginx/sites-available/{{domain3}}.conf'
#          mode: '0644'
        - src: 'templates/otel.yml'
          dest: '{{lemmy_base_dir}}/{{domain}}/otel.yml'
          mode: '0644'
        - src: 'templates/docker-compose.exporters.yml'
          dest: '{{lemmy_base_dir}}/{{domain}}/docker-compose.exporters.yml'
          mode: '0644'
        - src: 'templates/config.rules'
          dest: '{{lemmy_base_dir}}/{{domain}}/config'
          mode: '0644'
        - src: 'templates/alertmanager/config.yml'
          dest: '{{lemmy_base_dir}}/{{domain}}/alertmanager/config.yml'
          mode: '0644'
        - src: 'templates/caddy/Caddyfile'
          dest: '{{lemmy_base_dir}}/{{domain}}/caddy/Caddyfile'
          mode: '0644'
        - src: 'templates/grafana/provisioning/dashboards/nginx_container.json'
          dest: '{{lemmy_base_dir}}/{{domain}}/grafana/provisioning/dashboards/nginx_container.json'
          mode: '0644'
        - src: 'templates/grafana/provisioning/dashboards/dashboard.yml'
          dest: '{{lemmy_base_dir}}/{{domain}}/grafana/provisioning/dashboards/dashboard.yml'
          mode: '0644'
        - src: 'templates/grafana/provisioning/dashboards/docker_containers.json'
          dest: '{{lemmy_base_dir}}/{{domain}}/grafana/provisioning/dashboards/docker_containers.json'
          mode: '0644'
        - src: 'templates/grafana/provisioning/dashboards/docker_host.json'
          dest: '{{lemmy_base_dir}}/{{domain}}/grafana/provisioning/dashboards/docker_host.json'
          mode: '0644'
        - src: 'templates/grafana/provisioning/dashboards/monitor_services.json'
          dest: '{{lemmy_base_dir}}/{{domain}}/grafana/provisioning/dashboards/monitor_services.json'
          mode: '0644'
        - src: 'templates/grafana/provisioning/dashboards/jaeger.json'
          dest: '{{lemmy_base_dir}}/{{domain}}/grafana/provisioning/dashboards/jaeger.json'
          mode: '0644'
        - src: 'templates/grafana/provisioning/dashboards/loki.json'
          dest: '{{lemmy_base_dir}}/{{domain}}/grafana/provisioning/dashboards/loki.json'
          mode: '0644'
        - src: 'templates/grafana/provisioning/dashboards/otel-collector.json'
          dest: '{{lemmy_base_dir}}/{{domain}}/grafana/provisioning/dashboards/otel-collector.json'
          mode: '0644'
        - src: 'templates/grafana/provisioning/datasources/datasource.yml'
          dest: '{{lemmy_base_dir}}/{{domain}}/grafana/provisioning/datasources/datasource.yml'
          mode: '0644'
        - src: 'templates/helpers/aws/README.md'
          dest: '{{lemmy_base_dir}}/{{domain}}/helpers/aws/README.md'
          mode: '0644'
        - src: 'templates/helpers/aws/node_exporter_task_definition.json'
          dest: '{{lemmy_base_dir}}/{{domain}}/helpers/aws/node_exporter_task_definition.json'
          mode: '0644'
        - src: 'templates/helpers/aws/cadvisor_ecs_task_definition.json'
          dest: '{{lemmy_base_dir}}/{{domain}}/helpers/aws/cadvisor_ecs_task_definition.json'
          mode: '0644'
        - src: 'templates/helpers/aws/prometheus.yml'
          dest: '{{lemmy_base_dir}}/{{domain}}/helpers/aws/prometheus.yml'
          mode: '0644'
        - src: 'templates/prometheus/alert.rules'
          dest: '{{lemmy_base_dir}}/{{domain}}/prometheus/alert.rules'
          mode: '0644'
        - src: 'templates/prometheus/prometheus.yml'
          dest: '{{lemmy_base_dir}}/{{domain}}/prometheus/prometheus.yml'
          mode: '0644'

      vars:
        lemmy_docker_image: "dessalines/lemmy:{{ lemmy_version | default( lookup('file', 'VERSION') )}}"
        lemmy_docker_ui_image: "dessalines/lemmy-ui:{{ lemmy_ui_version | default(lemmy_version | default(lookup('file', 'VERSION')))}}"
        lemmy_docker_uit_image: "dessalines/lemmy-ui:{{ lemmy_ui_version | default(lemmy_version | default(lookup('file', 'VERSION')))}}"
        
#    - block:
#      - name: gather stats on site enabled config
#        stat:
#          path: "/etc/nginx/sites-enabled/{{domain}}.conf"
#        register: reg_enabled

#      - name: remove if regular file (legacy) instead of symlink
#        file:
#          path: "/etc/nginx/sites-enabled/{{domain}}.conf"
#          state: absent
#        when: reg_enabled.stat.exists and reg_enabled.stat.isreg

#      - name: enable nginx site
#        file:
#          src: '../sites-available/{{domain}}.conf'
#          dest: "/etc/nginx/sites-enabled/{{domain}}.conf"
#          state: link

#    - block:
#      - name: gather stats on 2nd site enabled config
#        stat:
#          path: "/etc/nginx/sites-enabled/{{domain2}}.conf"
#        register: reg_enabled

#      - name: remove if regular file (legacy) instead of symlink for 2nd site
#        file:
#          path: "/etc/nginx/sites-enabled/{{domain2}}.conf"
#          state: absent
#        when: reg_enabled.stat.exists and reg_enabled.stat.isreg

#      - name: enable 2nd nginx site
#        file:
#          src: '../sites-available/{{domain2}}.conf'
#          dest: "/etc/nginx/sites-enabled/{{domain2}}.conf"
#          state: link

#    - block:
#      - name: gather stats on jaeger site enabled config
#        stat:
#          path: "/etc/nginx/sites-enabled/{{domain3}}.conf"
#        register: reg_enabled

#      - name: remove if regular file (legacy) instead of symlink for jaeger site
#        file:
#          path: "/etc/nginx/sites-enabled/{{domain3}}.conf"
#          state: absent
#        when: reg_enabled.stat.exists and reg_enabled.stat.isreg

#      - name: enable jaeger nginx site
#        file:
#          src: '../sites-available/{{domain3}}.conf'
#          dest: "/etc/nginx/sites-enabled/{{domain3}}.conf"
#          state: link

    - name: add the config.hjson
      template:
        src: 'inventory/host_vars/{{domain}}/config.hjson'
        dest: '{{lemmy_base_dir}}/{{domain}}/lemmy.hjson'
        mode: '0600'
        owner: '1000'
        group: '1000'
    vars:
      postgres_password: "{{ lookup('password', 'inventory/host_vars/{{domain}}/passwords/postgres chars=ascii_letters,digits') }}"

  - name: enable and start docker service
    systemd:
      name: docker
      enabled: yes
      state: started

  # - name: Change the working directory to /opt
  #   ansible.builtin.shell:
  #     cmd: find .                    # To list files under /opt directory
  #     chdir: /opt                    # changes to /opt directory
  #     register: shell_output
  # - debug: var=shell_output

  - name: start docker-compose
    docker_compose:
      project_src: '{{lemmy_base_dir}}/{{domain}}'
      state: present
      pull: yes
      remove_orphans: yes

#  - name: certbot renewal cronjob
#    cron:
#      special_time: daily
#      name: certbot-renew-lemmy
#      user: root
#      job: "certbot certonly --nginx --cert-name '{{ domain }}' -d '{{ domain }}' --deploy-hook 'nginx -s reload'"

#  - name: certbot renewal cronjob2
#    cron:
#      special_time: daily
#      name: certbot-renew-lemmy2
#      user: root
#      job: "certbot certonly --nginx --cert-name '{{ domain2 }}' -d '{{ domain2 }}' --deploy-hook 'nginx -s reload'"

#  - name: certbot renewal cronjob3
#    cron:
#      special_time: daily
#      name: certbot-renew-jaeger
#      user: root
#      job: "certbot certonly --nginx --cert-name '{{ domain3 }}' -d '{{ domain3 }}' --deploy-hook 'nginx -s reload'"
